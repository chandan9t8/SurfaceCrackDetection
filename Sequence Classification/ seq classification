{
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/chandan9t8/UnivProjects/blob/main/Sequence%20Classification/%20seq%20classification\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 2,
      "metadata": {
        "id": "cEs-Rbm3wG6c"
      },
      "outputs": [],
      "source": [
        "import pandas as pd\n",
        "import numpy as np\n",
        "import torch\n",
        "from torch.utils.data import DataLoader, TensorDataset\n",
        "from sklearn.model_selection import train_test_split\n",
        "import torch.nn.functional as F\n",
        "import torch.nn as nn"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 3,
      "metadata": {
        "id": "TF49qOxmv2S-"
      },
      "outputs": [],
      "source": [
        "features = pd.read_csv('./train_features.csv')\n",
        "labels = pd.read_csv('./train_labels.csv')"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 4,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 206
        },
        "id": "UMz0tDT6xCq2",
        "outputId": "320635ca-7b3a-4cde-b8e0-f48c9ea1cf74"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "   ids                                               data  labels\n",
              "0    0  -------------------------------------------GCT...     663\n",
              "1    1  TACATTATATTTTATTCTTGGATTATGATCAGGAATAGTAGGAACT...     862\n",
              "2    2  AATATTATATTTTATCTTTGCTATATGATCTGGAATAATTGGATCC...     650\n",
              "3    3  TACCTTATATTTTATTTTTGGAATTTGATCAGGTATAGTGGGAACT...     300\n",
              "4    4  AACATTATACTTCATTTTTGGAATATGATCCGGTATAATTGGTACT...     785"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-68e5230f-7506-4983-9deb-42e6a968bace\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>ids</th>\n",
              "      <th>data</th>\n",
              "      <th>labels</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>0</td>\n",
              "      <td>-------------------------------------------GCT...</td>\n",
              "      <td>663</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>1</td>\n",
              "      <td>TACATTATATTTTATTCTTGGATTATGATCAGGAATAGTAGGAACT...</td>\n",
              "      <td>862</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>2</td>\n",
              "      <td>AATATTATATTTTATCTTTGCTATATGATCTGGAATAATTGGATCC...</td>\n",
              "      <td>650</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>3</td>\n",
              "      <td>TACCTTATATTTTATTTTTGGAATTTGATCAGGTATAGTGGGAACT...</td>\n",
              "      <td>300</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>4</td>\n",
              "      <td>AACATTATACTTCATTTTTGGAATATGATCCGGTATAATTGGTACT...</td>\n",
              "      <td>785</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-68e5230f-7506-4983-9deb-42e6a968bace')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-68e5230f-7506-4983-9deb-42e6a968bace button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-68e5230f-7506-4983-9deb-42e6a968bace');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-e648d66b-eb8c-49c8-87fb-c481ae9259f3\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-e648d66b-eb8c-49c8-87fb-c481ae9259f3')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-e648d66b-eb8c-49c8-87fb-c481ae9259f3 button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "data",
              "summary": "{\n  \"name\": \"data\",\n  \"rows\": 16969,\n  \"fields\": [\n    {\n      \"column\": \"ids\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 4898,\n        \"min\": 0,\n        \"max\": 16968,\n        \"num_unique_values\": 16969,\n        \"samples\": [\n          6109,\n          4715,\n          11200\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"data\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 10255,\n        \"samples\": [\n          \"AACATTATACTTTTTATTTGGAATATGGGCAGGAATAGTAGGAACATCGTTAAGTATTTTAATTCGGTTAGAATTAGGAACTAGAGGAAGATTAATTGGAAACGACCAAATTTATAATATAATTGTTACAGCTCATGCTTTCATTATAATTTTCTTTATAGTAATACCTATTATAATTGGGGGTTTTGGAAATTGATTAGTTCCTTTAATAATTGGAGCTCCTGATATAGCATTTCCACGATTAAATAACATAAGATTTTGACTTTTACCCCCTGCTTTAACTCTTTTAATTTTAAGAACAATCGTAGAAATAGGGGCAGGAACAGGATGAACTGTTTACCCTCCTCTTTCTTCTAATTTAACACATAATGGGCCTTCAGTAGATTTAGTGATTTTTAGTTTACATTTAGCAGGAATTTCCTCAATTTTAGGTGCAGTAAATTTCATTTCAACTATTATAAATATACGTCCATTTGGTATAATACTTGATAAAACTCCTTTATTTGTATGATCTGTTCTTATTACAGCAATTCTTTTATTACTATCACTACCAGTTCTTGCAGGAGCAATTACTATACTATTAACTGACCGAAACTTAAATTCTTCTTTTTTTGANCCAACCGGTGGGGGAGACCCAATTTTATACCAACATTTATTT\",\n          \"AACATTATATTTTATTTTTGGGGCTTGAGCTGGAATAGTTGGAACTTCTTTAAGTTTACTAATTCGAGCAGAATTAAGTCAACCAGGTGTATTTATTGGAAATGATCAAATTTATAATGTTATTGTAACTGCTCATGCTTTTATTATAATTTTTTTTATAGTAATACCAATCATAATTGGAGGATTTGGAAATTGATTAGTTCCTTTAATGTTAGGAGCTCCAGATATGGCCTTTCCTCGAATAAATAATATAAGTTTTTGAATACTACCTCCTTCATTGACACTACTACTTTCAAGCAGTTTAGTAGAAAATGGGGCTGGGACTGGATGAACAGTGTATCCCCCTCTTTCATCTGGAACAGCTCATGCTGGAGCTTCAGTAGACTTAGCTATTTTTTCTTTACATTTAGCAGGAATTTCATCAATTTTAGGTGCAGTAAATTTTATTACAACAGTAATTAATATACGATCTTCAGGAATTACTCTTGATCGAATACCTTTATTTGTTTGATCAGTAGTAATTACTGCAGTTTTATTACTTCTTTCTTTACCTGTTTTAGCTGGTGCTATTACTATGTTATTAACAGATCGAAATTTAAATACTTCATTCTTTGATCCAATTGGAGGAGGAGATCCAATTTTATATCAACATTTATTT\",\n          \"GATCTTATATTTTATTTTTGGGATGTGAGCAGGAATTTTGGGTCTTTCGATGAGTATAATTATTCGATTAGAGCTTGGAAACCCAGGTTCTATAATTGGAAATGATCAGATTTATAATTCAATTGTAACAACTCATGCTTTTACAATAATTTTCTTTTTTGTTATGCCTGTAATAATGGGGGGTTTTGGTAATTTTTTAATTCCAATAATAATGGGTGTTCCAGATATAGCTTTTCCTCGGATAAATAATATAAGATTTTGATTATTACCACCTAGATTATTATTATTATTATCTAGGATATTTATTGGGGTGGGTACTGGGACTGGTTGAACTGTTTATCCCCCCTTATCTTCAAGATTAGGACATTCTGGTCCTTCTGTTGATTTATCAATTTTTTCTCTTCACATTGCTGGGATTTCTTCAATTATAGGTTCAATTAATTTTATTACGACAATTTTGAAT------ATAAAAATTTTCAAGATTGAAAATGTCCCCCTTTTCCCCTGGGCTATATTATTAACAGCAATTTTATTGTTGTTATCATTACCTGTTCTTGCGGGGGCAATTACAATATTATTGTTTGATCGGAATTTAAATACCTCATTTTTTGACCCCTCTGGAGGGGGGGATCCAATTTTATATCAGCATTTATTT\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"labels\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 351,\n        \"min\": 1,\n        \"max\": 1213,\n        \"num_unique_values\": 1213,\n        \"samples\": [\n          594,\n          999,\n          782\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 4
        }
      ],
      "source": [
        "#merge features and labels\n",
        "data = pd.merge(features[['ids', 'data']], labels[['ids', 'labels']], on='ids', how='inner')\n",
        "data.head(5)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 5,
      "metadata": {
        "id": "XuqtKOqT2wuj"
      },
      "outputs": [],
      "source": [
        "#perform one-hot encoding\n",
        "\n",
        "one_hot_encoding = {\n",
        "    'A': [1, 0, 0, 0, 0],\n",
        "    'C': [0, 1, 0, 0, 0],\n",
        "    'G': [0, 0, 1, 0, 0],\n",
        "    'T': [0, 0, 0, 1, 0],\n",
        "    '-': [0, 0, 0, 0, 1],\n",
        "}\n",
        "\n",
        "def encode_sequence(seq):\n",
        "    return np.array([one_hot_encoding.get(nuc, [0, 0, 0, 0, 1]) for nuc in seq])"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 6,
      "metadata": {
        "id": "xIyBvQRn6hJL"
      },
      "outputs": [],
      "source": [
        "data['encoded_data'] = data['data'].apply(lambda x: encode_sequence(x))"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 7,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "Vsn2LFH_7Bjg",
        "outputId": "e9d8941b-a423-4c87-ee95-44ce859ec4fd"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "False\n"
          ]
        }
      ],
      "source": [
        "#check if the DNA sequences are of the same length\n",
        "\n",
        "lengths = data['data'].apply(len)\n",
        "are_lengths_same = lengths.nunique() == 1\n",
        "\n",
        "print(are_lengths_same)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 8,
      "metadata": {
        "id": "8atX8Hnn8E1u"
      },
      "outputs": [],
      "source": [
        "data['sequence_length'] = data['data'].apply(len)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 9,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 520
        },
        "id": "YnzH7VnN-svg",
        "outputId": "5b5c5b32-a78d-4f57-b0fa-a4e9e2395d86"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "    ids                                               data  labels  \\\n",
              "0     0  -------------------------------------------GCT...     663   \n",
              "1     1  TACATTATATTTTATTCTTGGATTATGATCAGGAATAGTAGGAACT...     862   \n",
              "2     2  AATATTATATTTTATCTTTGCTATATGATCTGGAATAATTGGATCC...     650   \n",
              "3     3  TACCTTATATTTTATTTTTGGAATTTGATCAGGTATAGTGGGAACT...     300   \n",
              "4     4  AACATTATACTTCATTTTTGGAATATGATCCGGTATAATTGGTACT...     785   \n",
              "5     5  GGAGCATGATCTGGAATAATTGGAACTTCTCTAAGAATTTTAATTC...     723   \n",
              "6     6  AACTTTATACTTTATTTTTGGAGCTTGAGCTGGAATAGTAGGTACT...    1059   \n",
              "7     7  AACATTATATTTTATTTTCGGAATTTGATCAGGAATAGTAGGAACA...     476   \n",
              "8     8  AACTTTATATTTTATTTTTGGAGCTTGATCTAGAATAGTGGGAACT...     378   \n",
              "9     9  AACTTTATATTTCCTATTTGGTAGATGAGCAGGAATAGTGGGAACT...    1194   \n",
              "10   10  AATATTATATTTTATTTTTGCTATATGATCTGGTATAATTGGTGCT...    1082   \n",
              "11   11  AACATTATATTTTATTTTTGGATTTTGATCAGGAATACTTGGAATA...     335   \n",
              "12   12  AACTTTATATTTTATTTTTGGTGCATGATCTGGCTCTTTAGGACTA...     261   \n",
              "13   13  TATATTATATTTTTTATTTGGTATATGATCTGGAATACTAGGAGCA...     280   \n",
              "14   14  AGTTTTATATTTTATTATAAGAATTTGATCAGGAATAATAGGTTCA...     443   \n",
              "\n",
              "                                         encoded_data  sequence_length  \n",
              "0   [[0, 0, 0, 0, 1], [0, 0, 0, 0, 1], [0, 0, 0, 0...              658  \n",
              "1   [[0, 0, 0, 1, 0], [1, 0, 0, 0, 0], [0, 1, 0, 0...              658  \n",
              "2   [[1, 0, 0, 0, 0], [1, 0, 0, 0, 0], [0, 0, 0, 1...              658  \n",
              "3   [[0, 0, 0, 1, 0], [1, 0, 0, 0, 0], [0, 1, 0, 0...              658  \n",
              "4   [[1, 0, 0, 0, 0], [1, 0, 0, 0, 0], [0, 1, 0, 0...              658  \n",
              "5   [[0, 0, 1, 0, 0], [0, 0, 1, 0, 0], [1, 0, 0, 0...              639  \n",
              "6   [[1, 0, 0, 0, 0], [1, 0, 0, 0, 0], [0, 1, 0, 0...              658  \n",
              "7   [[1, 0, 0, 0, 0], [1, 0, 0, 0, 0], [0, 1, 0, 0...              658  \n",
              "8   [[1, 0, 0, 0, 0], [1, 0, 0, 0, 0], [0, 1, 0, 0...              658  \n",
              "9   [[1, 0, 0, 0, 0], [1, 0, 0, 0, 0], [0, 1, 0, 0...              658  \n",
              "10  [[1, 0, 0, 0, 0], [1, 0, 0, 0, 0], [0, 0, 0, 1...              658  \n",
              "11  [[1, 0, 0, 0, 0], [1, 0, 0, 0, 0], [0, 1, 0, 0...              658  \n",
              "12  [[1, 0, 0, 0, 0], [1, 0, 0, 0, 0], [0, 1, 0, 0...              658  \n",
              "13  [[0, 0, 0, 1, 0], [1, 0, 0, 0, 0], [0, 0, 0, 1...              658  \n",
              "14  [[1, 0, 0, 0, 0], [0, 0, 1, 0, 0], [0, 0, 0, 1...              658  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-7eefc301-0053-46a1-84d2-b68509a02a65\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>ids</th>\n",
              "      <th>data</th>\n",
              "      <th>labels</th>\n",
              "      <th>encoded_data</th>\n",
              "      <th>sequence_length</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>0</td>\n",
              "      <td>-------------------------------------------GCT...</td>\n",
              "      <td>663</td>\n",
              "      <td>[[0, 0, 0, 0, 1], [0, 0, 0, 0, 1], [0, 0, 0, 0...</td>\n",
              "      <td>658</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>1</td>\n",
              "      <td>TACATTATATTTTATTCTTGGATTATGATCAGGAATAGTAGGAACT...</td>\n",
              "      <td>862</td>\n",
              "      <td>[[0, 0, 0, 1, 0], [1, 0, 0, 0, 0], [0, 1, 0, 0...</td>\n",
              "      <td>658</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>2</td>\n",
              "      <td>AATATTATATTTTATCTTTGCTATATGATCTGGAATAATTGGATCC...</td>\n",
              "      <td>650</td>\n",
              "      <td>[[1, 0, 0, 0, 0], [1, 0, 0, 0, 0], [0, 0, 0, 1...</td>\n",
              "      <td>658</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>3</td>\n",
              "      <td>TACCTTATATTTTATTTTTGGAATTTGATCAGGTATAGTGGGAACT...</td>\n",
              "      <td>300</td>\n",
              "      <td>[[0, 0, 0, 1, 0], [1, 0, 0, 0, 0], [0, 1, 0, 0...</td>\n",
              "      <td>658</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>4</td>\n",
              "      <td>AACATTATACTTCATTTTTGGAATATGATCCGGTATAATTGGTACT...</td>\n",
              "      <td>785</td>\n",
              "      <td>[[1, 0, 0, 0, 0], [1, 0, 0, 0, 0], [0, 1, 0, 0...</td>\n",
              "      <td>658</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>5</th>\n",
              "      <td>5</td>\n",
              "      <td>GGAGCATGATCTGGAATAATTGGAACTTCTCTAAGAATTTTAATTC...</td>\n",
              "      <td>723</td>\n",
              "      <td>[[0, 0, 1, 0, 0], [0, 0, 1, 0, 0], [1, 0, 0, 0...</td>\n",
              "      <td>639</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>6</th>\n",
              "      <td>6</td>\n",
              "      <td>AACTTTATACTTTATTTTTGGAGCTTGAGCTGGAATAGTAGGTACT...</td>\n",
              "      <td>1059</td>\n",
              "      <td>[[1, 0, 0, 0, 0], [1, 0, 0, 0, 0], [0, 1, 0, 0...</td>\n",
              "      <td>658</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>7</th>\n",
              "      <td>7</td>\n",
              "      <td>AACATTATATTTTATTTTCGGAATTTGATCAGGAATAGTAGGAACA...</td>\n",
              "      <td>476</td>\n",
              "      <td>[[1, 0, 0, 0, 0], [1, 0, 0, 0, 0], [0, 1, 0, 0...</td>\n",
              "      <td>658</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>8</th>\n",
              "      <td>8</td>\n",
              "      <td>AACTTTATATTTTATTTTTGGAGCTTGATCTAGAATAGTGGGAACT...</td>\n",
              "      <td>378</td>\n",
              "      <td>[[1, 0, 0, 0, 0], [1, 0, 0, 0, 0], [0, 1, 0, 0...</td>\n",
              "      <td>658</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>9</th>\n",
              "      <td>9</td>\n",
              "      <td>AACTTTATATTTCCTATTTGGTAGATGAGCAGGAATAGTGGGAACT...</td>\n",
              "      <td>1194</td>\n",
              "      <td>[[1, 0, 0, 0, 0], [1, 0, 0, 0, 0], [0, 1, 0, 0...</td>\n",
              "      <td>658</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>10</th>\n",
              "      <td>10</td>\n",
              "      <td>AATATTATATTTTATTTTTGCTATATGATCTGGTATAATTGGTGCT...</td>\n",
              "      <td>1082</td>\n",
              "      <td>[[1, 0, 0, 0, 0], [1, 0, 0, 0, 0], [0, 0, 0, 1...</td>\n",
              "      <td>658</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>11</th>\n",
              "      <td>11</td>\n",
              "      <td>AACATTATATTTTATTTTTGGATTTTGATCAGGAATACTTGGAATA...</td>\n",
              "      <td>335</td>\n",
              "      <td>[[1, 0, 0, 0, 0], [1, 0, 0, 0, 0], [0, 1, 0, 0...</td>\n",
              "      <td>658</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>12</th>\n",
              "      <td>12</td>\n",
              "      <td>AACTTTATATTTTATTTTTGGTGCATGATCTGGCTCTTTAGGACTA...</td>\n",
              "      <td>261</td>\n",
              "      <td>[[1, 0, 0, 0, 0], [1, 0, 0, 0, 0], [0, 1, 0, 0...</td>\n",
              "      <td>658</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>13</th>\n",
              "      <td>13</td>\n",
              "      <td>TATATTATATTTTTTATTTGGTATATGATCTGGAATACTAGGAGCA...</td>\n",
              "      <td>280</td>\n",
              "      <td>[[0, 0, 0, 1, 0], [1, 0, 0, 0, 0], [0, 0, 0, 1...</td>\n",
              "      <td>658</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>14</th>\n",
              "      <td>14</td>\n",
              "      <td>AGTTTTATATTTTATTATAAGAATTTGATCAGGAATAATAGGTTCA...</td>\n",
              "      <td>443</td>\n",
              "      <td>[[1, 0, 0, 0, 0], [0, 0, 1, 0, 0], [0, 0, 0, 1...</td>\n",
              "      <td>658</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-7eefc301-0053-46a1-84d2-b68509a02a65')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-7eefc301-0053-46a1-84d2-b68509a02a65 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-7eefc301-0053-46a1-84d2-b68509a02a65');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-ca81f414-b653-4308-8dc5-4d1bfc658805\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-ca81f414-b653-4308-8dc5-4d1bfc658805')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-ca81f414-b653-4308-8dc5-4d1bfc658805 button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "data",
              "summary": "{\n  \"name\": \"data\",\n  \"rows\": 16969,\n  \"fields\": [\n    {\n      \"column\": \"ids\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 4898,\n        \"min\": 0,\n        \"max\": 16968,\n        \"num_unique_values\": 16969,\n        \"samples\": [\n          6109,\n          4715,\n          11200\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"data\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 10255,\n        \"samples\": [\n          \"AACATTATACTTTTTATTTGGAATATGGGCAGGAATAGTAGGAACATCGTTAAGTATTTTAATTCGGTTAGAATTAGGAACTAGAGGAAGATTAATTGGAAACGACCAAATTTATAATATAATTGTTACAGCTCATGCTTTCATTATAATTTTCTTTATAGTAATACCTATTATAATTGGGGGTTTTGGAAATTGATTAGTTCCTTTAATAATTGGAGCTCCTGATATAGCATTTCCACGATTAAATAACATAAGATTTTGACTTTTACCCCCTGCTTTAACTCTTTTAATTTTAAGAACAATCGTAGAAATAGGGGCAGGAACAGGATGAACTGTTTACCCTCCTCTTTCTTCTAATTTAACACATAATGGGCCTTCAGTAGATTTAGTGATTTTTAGTTTACATTTAGCAGGAATTTCCTCAATTTTAGGTGCAGTAAATTTCATTTCAACTATTATAAATATACGTCCATTTGGTATAATACTTGATAAAACTCCTTTATTTGTATGATCTGTTCTTATTACAGCAATTCTTTTATTACTATCACTACCAGTTCTTGCAGGAGCAATTACTATACTATTAACTGACCGAAACTTAAATTCTTCTTTTTTTGANCCAACCGGTGGGGGAGACCCAATTTTATACCAACATTTATTT\",\n          \"AACATTATATTTTATTTTTGGGGCTTGAGCTGGAATAGTTGGAACTTCTTTAAGTTTACTAATTCGAGCAGAATTAAGTCAACCAGGTGTATTTATTGGAAATGATCAAATTTATAATGTTATTGTAACTGCTCATGCTTTTATTATAATTTTTTTTATAGTAATACCAATCATAATTGGAGGATTTGGAAATTGATTAGTTCCTTTAATGTTAGGAGCTCCAGATATGGCCTTTCCTCGAATAAATAATATAAGTTTTTGAATACTACCTCCTTCATTGACACTACTACTTTCAAGCAGTTTAGTAGAAAATGGGGCTGGGACTGGATGAACAGTGTATCCCCCTCTTTCATCTGGAACAGCTCATGCTGGAGCTTCAGTAGACTTAGCTATTTTTTCTTTACATTTAGCAGGAATTTCATCAATTTTAGGTGCAGTAAATTTTATTACAACAGTAATTAATATACGATCTTCAGGAATTACTCTTGATCGAATACCTTTATTTGTTTGATCAGTAGTAATTACTGCAGTTTTATTACTTCTTTCTTTACCTGTTTTAGCTGGTGCTATTACTATGTTATTAACAGATCGAAATTTAAATACTTCATTCTTTGATCCAATTGGAGGAGGAGATCCAATTTTATATCAACATTTATTT\",\n          \"GATCTTATATTTTATTTTTGGGATGTGAGCAGGAATTTTGGGTCTTTCGATGAGTATAATTATTCGATTAGAGCTTGGAAACCCAGGTTCTATAATTGGAAATGATCAGATTTATAATTCAATTGTAACAACTCATGCTTTTACAATAATTTTCTTTTTTGTTATGCCTGTAATAATGGGGGGTTTTGGTAATTTTTTAATTCCAATAATAATGGGTGTTCCAGATATAGCTTTTCCTCGGATAAATAATATAAGATTTTGATTATTACCACCTAGATTATTATTATTATTATCTAGGATATTTATTGGGGTGGGTACTGGGACTGGTTGAACTGTTTATCCCCCCTTATCTTCAAGATTAGGACATTCTGGTCCTTCTGTTGATTTATCAATTTTTTCTCTTCACATTGCTGGGATTTCTTCAATTATAGGTTCAATTAATTTTATTACGACAATTTTGAAT------ATAAAAATTTTCAAGATTGAAAATGTCCCCCTTTTCCCCTGGGCTATATTATTAACAGCAATTTTATTGTTGTTATCATTACCTGTTCTTGCGGGGGCAATTACAATATTATTGTTTGATCGGAATTTAAATACCTCATTTTTTGACCCCTCTGGAGGGGGGGATCCAATTTTATATCAGCATTTATTT\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"labels\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 351,\n        \"min\": 1,\n        \"max\": 1213,\n        \"num_unique_values\": 1213,\n        \"samples\": [\n          594,\n          999,\n          782\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"encoded_data\",\n      \"properties\": {\n        \"dtype\": \"object\",\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"sequence_length\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 40,\n        \"min\": 6,\n        \"max\": 1058,\n        \"num_unique_values\": 131,\n        \"samples\": [\n          634,\n          647,\n          640\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 9
        }
      ],
      "source": [
        "data.head(15)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 10,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "eiVEJ_6c-ukM",
        "outputId": "b1fde844-fbf7-43cb-e48e-05a8433d003f"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "1058"
            ]
          },
          "metadata": {},
          "execution_count": 10
        }
      ],
      "source": [
        "#max length of the sequence\n",
        "\n",
        "data['sequence_length'].max()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 11,
      "metadata": {
        "id": "o074akmdggS0"
      },
      "outputs": [],
      "source": [
        "#padding all sequences to max length\n",
        "\n",
        "def pad_sequence_to_max(sequence, target_length=1058, pad_value=[0, 0, 0, 0, 0]):\n",
        "    current_length = sequence.shape[0]\n",
        "    padding_needed = target_length - current_length\n",
        "    padding_array = np.tile(pad_value, (padding_needed, 1))\n",
        "    padded_sequence = np.vstack([sequence, padding_array])\n",
        "    return padded_sequence"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 12,
      "metadata": {
        "id": "JCGF3UNU1F6_"
      },
      "outputs": [],
      "source": [
        "data['padded_encoded_data'] = data['encoded_data'].apply(lambda x: pad_sequence_to_max(np.array(x)))"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 13,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "j5U1UnUOimCk",
        "outputId": "3d55553e-5bcf-41b9-cb69-d665f419d328"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "True\n"
          ]
        }
      ],
      "source": [
        "#reverify if all DNA lengths are equal\n",
        "\n",
        "lengths = data['padded_encoded_data'].apply(len)\n",
        "are_lengths_same = lengths.nunique() == 1\n",
        "\n",
        "print(are_lengths_same)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 14,
      "metadata": {
        "id": "kt5MRNUkj_k-"
      },
      "outputs": [],
      "source": [
        "#adding an extra dimension to fit the CNN\n",
        "data['padded_encoded_data_with_channel'] = data['padded_encoded_data'].apply(lambda x: torch.tensor(x).unsqueeze(0))"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 15,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "PbblxwXyCSA3",
        "outputId": "3737adf9-4f4b-4f44-f6cc-bab2b0d408cf"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "1213"
            ]
          },
          "metadata": {},
          "execution_count": 15
        }
      ],
      "source": [
        "#no of unique labels\n",
        "\n",
        "data['labels'].nunique()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 16,
      "metadata": {
        "id": "cWPIl1e_KCXq"
      },
      "outputs": [],
      "source": [
        "data_tensor = torch.stack(data['padded_encoded_data_with_channel'].tolist())\n",
        "data_tensor = torch.squeeze(data_tensor, dim=1)\n",
        "data_tensor = data_tensor.transpose(1, 2)\n",
        "data_tensor = data_tensor.long()\n",
        "\n",
        "labels_tensor = torch.tensor(data['labels'].values)\n",
        "labels_tensor = labels_tensor.long()\n",
        "labels_tensor = labels_tensor - 1            #making labels 0-indexed as crossentropy() works with 0-indexed classes\n",
        "\n",
        "\n",
        "# Create a dataset and dataloader\n",
        "dataset = TensorDataset(data_tensor, labels_tensor)\n",
        "dataloader = DataLoader(dataset, batch_size=32, shuffle=True)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 17,
      "metadata": {
        "id": "ZFo9q66kKnyA"
      },
      "outputs": [],
      "source": [
        "train_data, val_data, train_labels, val_labels = train_test_split(data_tensor, labels_tensor, test_size=0.2, random_state=42)\n",
        "\n",
        "# Create TensorDatasets for training and validation sets\n",
        "train_dataset = TensorDataset(train_data, train_labels)\n",
        "val_dataset = TensorDataset(val_data, val_labels)\n",
        "\n",
        "# Create DataLoaders for training and validation sets\n",
        "train_loader = DataLoader(train_dataset, batch_size=32, shuffle=True)\n",
        "val_loader = DataLoader(val_dataset, batch_size=32, shuffle=False)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 18,
      "metadata": {
        "id": "35LEu-4RKuIu"
      },
      "outputs": [],
      "source": [
        "#model\n",
        "\n",
        "class CNN1D(nn.Module):\n",
        "    def __init__(self, num_classes):\n",
        "        super(CNN1D, self).__init__()\n",
        "        self.conv1 = nn.Conv1d(in_channels=5, out_channels=32, kernel_size=3, stride=1, padding=1)\n",
        "        self.conv2 = nn.Conv1d(in_channels=32, out_channels=64, kernel_size=3, stride=1, padding=1)\n",
        "        self.pool = nn.MaxPool1d(2)\n",
        "\n",
        "        # fully connected layer\n",
        "        self.fc1 = nn.Linear(64 * 264, 128)\n",
        "        self.fc2 = nn.Linear(128, num_classes)\n",
        "\n",
        "    def forward(self, x):\n",
        "        x = self.pool(F.relu(self.conv1(x)))\n",
        "        x = self.pool(F.relu(self.conv2(x)))\n",
        "        x = torch.flatten(x, 1)\n",
        "        x = F.relu(self.fc1(x))\n",
        "        x = self.fc2(x)\n",
        "        return x"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 19,
      "metadata": {
        "id": "OCc5FfsFOdFo"
      },
      "outputs": [],
      "source": [
        "model = CNN1D(num_classes=1213)\n",
        "\n",
        "criterion = nn.CrossEntropyLoss()\n",
        "optimizer = torch.optim.Adam(model.parameters(), lr=0.0001)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 20,
      "metadata": {
        "id": "r6-DzyXhKOUu",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "4ceae650-f791-46f0-8c58-680fa07efb0f"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Epoch 1, Train Loss: 7.061231849894804, Val Loss: 6.985087782423073\n",
            "Epoch 2, Train Loss: 6.7614355928757615, Val Loss: 6.558869125687074\n",
            "Epoch 3, Train Loss: 6.223632695815143, Val Loss: 6.016932260210269\n",
            "Epoch 4, Train Loss: 5.499955726511338, Val Loss: 5.263389836961978\n",
            "Epoch 5, Train Loss: 4.418742051405065, Val Loss: 4.147896318792183\n",
            "Epoch 6, Train Loss: 3.180656188516056, Val Loss: 3.1373511419118008\n",
            "Epoch 7, Train Loss: 2.2766832744373993, Val Loss: 2.4031033170557468\n",
            "Epoch 8, Train Loss: 1.7283236460124745, Val Loss: 1.9427558545754335\n",
            "Epoch 9, Train Loss: 1.3566492185873145, Val Loss: 1.6294482394913647\n",
            "Epoch 10, Train Loss: 1.0914887976646424, Val Loss: 1.4120383841969142\n",
            "Epoch 11, Train Loss: 0.8951488004712498, Val Loss: 1.2034907012342293\n",
            "Epoch 12, Train Loss: 0.7521586847655913, Val Loss: 1.064890627270547\n",
            "Epoch 13, Train Loss: 0.6361154727024191, Val Loss: 0.9553664997916356\n",
            "Epoch 14, Train Loss: 0.5453256144769052, Val Loss: 0.867351048042841\n",
            "Epoch 15, Train Loss: 0.4740132854966556, Val Loss: 0.8739241620647573\n",
            "Epoch 16, Train Loss: 0.4111564017306356, Val Loss: 0.7589043605828953\n",
            "Epoch 17, Train Loss: 0.3640355866972138, Val Loss: 0.7024045302489094\n",
            "Epoch 18, Train Loss: 0.3112389512272442, Val Loss: 0.6369163555519604\n",
            "Epoch 19, Train Loss: 0.28023541585487477, Val Loss: 0.6546859239167142\n",
            "Epoch 20, Train Loss: 0.24691316547200962, Val Loss: 0.6147334264051691\n",
            "Epoch 21, Train Loss: 0.2188264792061904, Val Loss: 0.585390598173732\n",
            "Epoch 22, Train Loss: 0.19559886091772247, Val Loss: 0.5486396289491486\n",
            "Epoch 23, Train Loss: 0.17515297736753435, Val Loss: 0.5559676940961976\n",
            "Epoch 24, Train Loss: 0.15921345332089593, Val Loss: 0.5186216582100247\n",
            "Epoch 25, Train Loss: 0.14170777444234667, Val Loss: 0.5235950736346368\n",
            "Epoch 26, Train Loss: 0.12282196533154038, Val Loss: 0.5183587261588773\n",
            "Epoch 27, Train Loss: 0.11249657431946081, Val Loss: 0.502643294789106\n",
            "Epoch 28, Train Loss: 0.10279559819575618, Val Loss: 0.5084404251320618\n",
            "Epoch 29, Train Loss: 0.09145759189172703, Val Loss: 0.5113527432571505\n",
            "Epoch 30, Train Loss: 0.08887105077724246, Val Loss: 0.5116603083769294\n",
            "Epoch 31, Train Loss: 0.06802345029571477, Val Loss: 0.5077141981145419\n",
            "Epoch 32, Train Loss: 0.06719634635565692, Val Loss: 0.5067886454793059\n",
            "Epoch 33, Train Loss: 0.059347899756668245, Val Loss: 0.49977081483142954\n",
            "Epoch 34, Train Loss: 0.05330674971399062, Val Loss: 0.5227702507557713\n",
            "Epoch 35, Train Loss: 0.048013491153662255, Val Loss: 0.5244792166871027\n",
            "Epoch 36, Train Loss: 0.04812324339606087, Val Loss: 0.5222133383172277\n",
            "Epoch 37, Train Loss: 0.043107993832844145, Val Loss: 0.5099894923079654\n",
            "Epoch 38, Train Loss: 0.04425755303955692, Val Loss: 0.5108136252987538\n",
            "Epoch 39, Train Loss: 0.03987578495323439, Val Loss: 0.5035833859028486\n",
            "Epoch 40, Train Loss: 0.03171040694421048, Val Loss: 0.5339914534956861\n",
            "Epoch 41, Train Loss: 0.03052560836515006, Val Loss: 0.5047529658441928\n",
            "Epoch 42, Train Loss: 0.03334498506313299, Val Loss: 0.5059586576029449\n",
            "Epoch 43, Train Loss: 0.03253144640393336, Val Loss: 0.5630948063090583\n",
            "Epoch 44, Train Loss: 0.031331411198274615, Val Loss: 0.5195456492844055\n",
            "Epoch 45, Train Loss: 0.026428424480425962, Val Loss: 0.5220326600306903\n",
            "Epoch 46, Train Loss: 0.027485411992871807, Val Loss: 0.5583241716175227\n",
            "Epoch 47, Train Loss: 0.02883365992251236, Val Loss: 0.5592719929849851\n",
            "Epoch 48, Train Loss: 0.024610450046328718, Val Loss: 0.5803503377981066\n",
            "Epoch 49, Train Loss: 0.026798095144262974, Val Loss: 0.550860407494583\n",
            "Epoch 50, Train Loss: 0.021968548932208624, Val Loss: 0.5498375723477905\n"
          ]
        }
      ],
      "source": [
        "num_epochs = 50\n",
        "\n",
        "for epoch in range(num_epochs):\n",
        "\n",
        "    #training step\n",
        "    model.train()\n",
        "    train_loss = 0.0\n",
        "    for inputs, labels in train_loader:\n",
        "        inputs = inputs.float()\n",
        "        optimizer.zero_grad()\n",
        "        outputs = model(inputs)\n",
        "        loss = criterion(outputs, labels)\n",
        "        loss.backward()\n",
        "        optimizer.step()\n",
        "        train_loss += loss.item()\n",
        "\n",
        "    #Validation step\n",
        "    model.eval()\n",
        "    val_loss = 0.0\n",
        "    with torch.no_grad():\n",
        "        for inputs, labels in val_loader:\n",
        "            inputs = inputs.float()\n",
        "            outputs = model(inputs)\n",
        "            loss = criterion(outputs, labels)\n",
        "            val_loss += loss.item()\n",
        "\n",
        "    print(f'Epoch {epoch+1}, Train Loss: {train_loss / len(train_loader)}, Val Loss: {val_loss / len(val_loader)}')\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 33,
      "metadata": {
        "id": "cBtbNS09yWjd",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 206
        },
        "outputId": "9f0cd099-705b-4667-e941-47cbbf4c5d2d"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "   ids                                               data\n",
              "0    0  --------------------GATTTTGATCTGGAATNCTAGGATTN...\n",
              "1    1  AACTTTATATTTTATCTTCGGATTTTGATCAGGTATACTAGGATTA...\n",
              "2    2  AACACTATATTTTATTTTTGGAATTTGAGCAGGAATAATAGGATTA...\n",
              "3    3  AATTCTATATTTTATCTTTGCTATTTGATCAGGAATAATTGGATCC...\n",
              "4    4  AATACTTTATTTTATTTTTGCTATATGGGCAGGAATATTAGGATCT..."
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-5d3f38ba-311e-48e4-ba49-5c8dbf11443c\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>ids</th>\n",
              "      <th>data</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>0</td>\n",
              "      <td>--------------------GATTTTGATCTGGAATNCTAGGATTN...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>1</td>\n",
              "      <td>AACTTTATATTTTATCTTCGGATTTTGATCAGGTATACTAGGATTA...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>2</td>\n",
              "      <td>AACACTATATTTTATTTTTGGAATTTGAGCAGGAATAATAGGATTA...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>3</td>\n",
              "      <td>AATTCTATATTTTATCTTTGCTATTTGATCAGGAATAATTGGATCC...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>4</td>\n",
              "      <td>AATACTTTATTTTATTTTTGCTATATGGGCAGGAATATTAGGATCT...</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-5d3f38ba-311e-48e4-ba49-5c8dbf11443c')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-5d3f38ba-311e-48e4-ba49-5c8dbf11443c button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-5d3f38ba-311e-48e4-ba49-5c8dbf11443c');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-63ba2243-0b5b-4eb2-be28-7191cbd126e5\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-63ba2243-0b5b-4eb2-be28-7191cbd126e5')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-63ba2243-0b5b-4eb2-be28-7191cbd126e5 button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "test_features",
              "summary": "{\n  \"name\": \"test_features\",\n  \"rows\": 4243,\n  \"fields\": [\n    {\n      \"column\": \"ids\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1224,\n        \"min\": 0,\n        \"max\": 4242,\n        \"num_unique_values\": 4243,\n        \"samples\": [\n          1044,\n          3802,\n          2184\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"data\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 3354,\n        \"samples\": [\n          \"TCTATTATATTTTATCTTTGCTATTTGAGCAGGAATAATTGGATCTTCTATAAGAATAATTATTCGTATTGAATTAGGCACCTGCGGAGCTTTAATTAATAACGATCAAATCTATAATTCAATTGTAACAGGACATGCTTTTATTATAATTTTTTTTATAGTTATACCTTTTATAATCGGAGGCTTCGGAAATTTTTTAGTCCCCCTAATACTCGGGGCCCCAGATATAGCTTACCCCCGAATAAATAATATAAGATTTTGACTACTACCACCCTCAATCCTTTTACTAACTATTAGAAATTTTATCAGATCTGGGGTAGGAACCGGATGAACAGTTTACCCACCTCTAGCATCTAACATCTATCATAATGGCCCTTCTGTAGATTTAGCCATTTTCTCCCTTCATATTGCTGGCATATCCTCAATTTTAGGAGCAATTAATTTTATCTCTACTATTATTAATATACACCATAAAAATTTTTCCACAGATAAAATCCCTCTTTTAGTATGATCAATCTTAATTACTGCAATTTTATTACTCCTATCTCTACCAGTTCTAGCCGGAGCAATTACAATACTTTTAACAGATCGAAACTTAAATACATCCTTTTTTGACCCATCCGGAGGGGGAGACCCAATTTTATATCAACATTTATTT\",\n          \"AACTTTATATTTTATCTTTGGAGCCTGAGCAGGAATAATTGGAACTTCCCTAAGTTTATTAATTCGTTCTGAATTAGGTAACCCTGGAACTTTAATTGGCGACGATCAAATTTACAATGTTATTGTAACTGCTCATGCTTTTGTCATAATTTTTTTTATAGTTATACCAATTGTTATTGGAGGATTTGGAAATTGACTAGTACCCTTAATACTAGGAGCCCCAGATATAGCATTTCCACGAATAAATAACATAAGGTTTTGACTTTTACCTCCTTCATTAACACTTTTATTGATAAGAAGAATGGTAGAAAGAGGAGCAGGAACAGGATGAACAGTTTACCCTCCTTTATCTTCAAATATTGCTCATGGTGGAGCTTCAGTTGATTTAGCAATTTTTAGCCTTCATTTAGCTGGAATCTCATCAATTTTAGGTGCTGTAAATTTTATTACTACAGTAATCAATATACGATCAACAGGTATAAGATTTGATCGAATACCTTTATTTGTTTGATCAGTAGCTATTACAGCATTACTACTTTTATTATCTCTACCTGTATTAGCTGGAGCAATTACAATACTATTGACTGATCGAAATTTAAATACATCATTTTTTGATCCTACCGGTGGAGGTGATCCAATTCTTTACCAACATTTATTT\",\n          \"TACTTTATACTTTATTTTTGGAGCCTGATCAGGAATAGTAGGAACTTCCCTAAGTATCCTAGTACGTGCTGAATTAGGACACCCTGGTGCTTTAATTGGAGATGATCAAATTTATAACGTAATTGTAACAGCTCATGCATTTATTATAATTTTTTTTATAGTTATACCAATTATAATTGGAGGATTTGGTAATTGATTAGTTCCTTTAATACTAGGAGCCCCAGATATAGCCTTTCCTCGAATAAATAATATAAGTTTTTGACTTCTACCTCCTGCACTAACTCTACTTCTAGTAAGTAGTATAGTTGAAAGGGGAGCTGGTACTGGCTGAACTGTTTACCCTCCCTTATCTTCTAATATTGCTCATAGAGGAGCTTCAGTAGATTTAGCAATTTTTTCTTTACATTTAGCTGGAATTTCATCTATTTTAGGAGCCGTGAATTTCATTACAACTGTAATTAATATACGTTCTACAGGTATTACATTTGATCGAATACCTTTATTTGTTTGATCAGTAGTAATTACAGCTTTACTTCTTCTTTTATCTTTACCAGTATTAGCTGGAGCAATTACTATATTATTAACAGATCGAAATTTAAATACTTCATTTTTTGATCCTGCTGGAGGAGGAGATCCGATTCTATACCAACATTTATTT\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 33
        }
      ],
      "source": [
        "test_features = pd.read_csv('./test_features.csv')\n",
        "test_features.head()"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "test_features['encoded_data'] = test_features['data'].apply(lambda x: encode_sequence(x))"
      ],
      "metadata": {
        "id": "QuCMQVdH-Iac"
      },
      "execution_count": 34,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "test_features.head()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 206
        },
        "id": "JG94WFWI-4yK",
        "outputId": "a2162b0c-ed8f-4c62-8470-ff59cf40efa7"
      },
      "execution_count": 35,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "   ids                                               data  \\\n",
              "0    0  --------------------GATTTTGATCTGGAATNCTAGGATTN...   \n",
              "1    1  AACTTTATATTTTATCTTCGGATTTTGATCAGGTATACTAGGATTA...   \n",
              "2    2  AACACTATATTTTATTTTTGGAATTTGAGCAGGAATAATAGGATTA...   \n",
              "3    3  AATTCTATATTTTATCTTTGCTATTTGATCAGGAATAATTGGATCC...   \n",
              "4    4  AATACTTTATTTTATTTTTGCTATATGGGCAGGAATATTAGGATCT...   \n",
              "\n",
              "                                        encoded_data  \n",
              "0  [[0, 0, 0, 0, 1], [0, 0, 0, 0, 1], [0, 0, 0, 0...  \n",
              "1  [[1, 0, 0, 0, 0], [1, 0, 0, 0, 0], [0, 1, 0, 0...  \n",
              "2  [[1, 0, 0, 0, 0], [1, 0, 0, 0, 0], [0, 1, 0, 0...  \n",
              "3  [[1, 0, 0, 0, 0], [1, 0, 0, 0, 0], [0, 0, 0, 1...  \n",
              "4  [[1, 0, 0, 0, 0], [1, 0, 0, 0, 0], [0, 0, 0, 1...  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-b4bec65a-61a4-42f6-b108-f0282c9d0ff1\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>ids</th>\n",
              "      <th>data</th>\n",
              "      <th>encoded_data</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>0</td>\n",
              "      <td>--------------------GATTTTGATCTGGAATNCTAGGATTN...</td>\n",
              "      <td>[[0, 0, 0, 0, 1], [0, 0, 0, 0, 1], [0, 0, 0, 0...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>1</td>\n",
              "      <td>AACTTTATATTTTATCTTCGGATTTTGATCAGGTATACTAGGATTA...</td>\n",
              "      <td>[[1, 0, 0, 0, 0], [1, 0, 0, 0, 0], [0, 1, 0, 0...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>2</td>\n",
              "      <td>AACACTATATTTTATTTTTGGAATTTGAGCAGGAATAATAGGATTA...</td>\n",
              "      <td>[[1, 0, 0, 0, 0], [1, 0, 0, 0, 0], [0, 1, 0, 0...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>3</td>\n",
              "      <td>AATTCTATATTTTATCTTTGCTATTTGATCAGGAATAATTGGATCC...</td>\n",
              "      <td>[[1, 0, 0, 0, 0], [1, 0, 0, 0, 0], [0, 0, 0, 1...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>4</td>\n",
              "      <td>AATACTTTATTTTATTTTTGCTATATGGGCAGGAATATTAGGATCT...</td>\n",
              "      <td>[[1, 0, 0, 0, 0], [1, 0, 0, 0, 0], [0, 0, 0, 1...</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-b4bec65a-61a4-42f6-b108-f0282c9d0ff1')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-b4bec65a-61a4-42f6-b108-f0282c9d0ff1 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-b4bec65a-61a4-42f6-b108-f0282c9d0ff1');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-5f37e60d-7d14-4d02-9107-cfb4651413f5\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-5f37e60d-7d14-4d02-9107-cfb4651413f5')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-5f37e60d-7d14-4d02-9107-cfb4651413f5 button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "test_features",
              "summary": "{\n  \"name\": \"test_features\",\n  \"rows\": 4243,\n  \"fields\": [\n    {\n      \"column\": \"ids\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1224,\n        \"min\": 0,\n        \"max\": 4242,\n        \"num_unique_values\": 4243,\n        \"samples\": [\n          1044,\n          3802,\n          2184\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"data\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 3354,\n        \"samples\": [\n          \"TCTATTATATTTTATCTTTGCTATTTGAGCAGGAATAATTGGATCTTCTATAAGAATAATTATTCGTATTGAATTAGGCACCTGCGGAGCTTTAATTAATAACGATCAAATCTATAATTCAATTGTAACAGGACATGCTTTTATTATAATTTTTTTTATAGTTATACCTTTTATAATCGGAGGCTTCGGAAATTTTTTAGTCCCCCTAATACTCGGGGCCCCAGATATAGCTTACCCCCGAATAAATAATATAAGATTTTGACTACTACCACCCTCAATCCTTTTACTAACTATTAGAAATTTTATCAGATCTGGGGTAGGAACCGGATGAACAGTTTACCCACCTCTAGCATCTAACATCTATCATAATGGCCCTTCTGTAGATTTAGCCATTTTCTCCCTTCATATTGCTGGCATATCCTCAATTTTAGGAGCAATTAATTTTATCTCTACTATTATTAATATACACCATAAAAATTTTTCCACAGATAAAATCCCTCTTTTAGTATGATCAATCTTAATTACTGCAATTTTATTACTCCTATCTCTACCAGTTCTAGCCGGAGCAATTACAATACTTTTAACAGATCGAAACTTAAATACATCCTTTTTTGACCCATCCGGAGGGGGAGACCCAATTTTATATCAACATTTATTT\",\n          \"AACTTTATATTTTATCTTTGGAGCCTGAGCAGGAATAATTGGAACTTCCCTAAGTTTATTAATTCGTTCTGAATTAGGTAACCCTGGAACTTTAATTGGCGACGATCAAATTTACAATGTTATTGTAACTGCTCATGCTTTTGTCATAATTTTTTTTATAGTTATACCAATTGTTATTGGAGGATTTGGAAATTGACTAGTACCCTTAATACTAGGAGCCCCAGATATAGCATTTCCACGAATAAATAACATAAGGTTTTGACTTTTACCTCCTTCATTAACACTTTTATTGATAAGAAGAATGGTAGAAAGAGGAGCAGGAACAGGATGAACAGTTTACCCTCCTTTATCTTCAAATATTGCTCATGGTGGAGCTTCAGTTGATTTAGCAATTTTTAGCCTTCATTTAGCTGGAATCTCATCAATTTTAGGTGCTGTAAATTTTATTACTACAGTAATCAATATACGATCAACAGGTATAAGATTTGATCGAATACCTTTATTTGTTTGATCAGTAGCTATTACAGCATTACTACTTTTATTATCTCTACCTGTATTAGCTGGAGCAATTACAATACTATTGACTGATCGAAATTTAAATACATCATTTTTTGATCCTACCGGTGGAGGTGATCCAATTCTTTACCAACATTTATTT\",\n          \"TACTTTATACTTTATTTTTGGAGCCTGATCAGGAATAGTAGGAACTTCCCTAAGTATCCTAGTACGTGCTGAATTAGGACACCCTGGTGCTTTAATTGGAGATGATCAAATTTATAACGTAATTGTAACAGCTCATGCATTTATTATAATTTTTTTTATAGTTATACCAATTATAATTGGAGGATTTGGTAATTGATTAGTTCCTTTAATACTAGGAGCCCCAGATATAGCCTTTCCTCGAATAAATAATATAAGTTTTTGACTTCTACCTCCTGCACTAACTCTACTTCTAGTAAGTAGTATAGTTGAAAGGGGAGCTGGTACTGGCTGAACTGTTTACCCTCCCTTATCTTCTAATATTGCTCATAGAGGAGCTTCAGTAGATTTAGCAATTTTTTCTTTACATTTAGCTGGAATTTCATCTATTTTAGGAGCCGTGAATTTCATTACAACTGTAATTAATATACGTTCTACAGGTATTACATTTGATCGAATACCTTTATTTGTTTGATCAGTAGTAATTACAGCTTTACTTCTTCTTTTATCTTTACCAGTATTAGCTGGAGCAATTACTATATTATTAACAGATCGAAATTTAAATACTTCATTTTTTGATCCTGCTGGAGGAGGAGATCCGATTCTATACCAACATTTATTT\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"encoded_data\",\n      \"properties\": {\n        \"dtype\": \"object\",\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 35
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "test_features['encoded_data'].apply(len).max()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "uaynWL4E-7nQ",
        "outputId": "ba213834-b726-4a62-bf40-841b64aa3eb7"
      },
      "execution_count": 36,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "862"
            ]
          },
          "metadata": {},
          "execution_count": 36
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "test_features['padded_encoded_data'] = test_features['encoded_data'].apply(lambda x: pad_sequence_to_max(np.array(x),target_length = 862))"
      ],
      "metadata": {
        "id": "S1FkSbqE_Mi5"
      },
      "execution_count": 37,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "lengths = test_features['padded_encoded_data'].apply(len)\n",
        "are_lengths_same = lengths.nunique() == 1\n",
        "\n",
        "print(are_lengths_same)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "ZczJWCmC_99R",
        "outputId": "e1b57582-1601-44f7-ad88-49319d203bd7"
      },
      "execution_count": 38,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "True\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#adding an extra dimension to fit the CNN\n",
        "test_features['padded_encoded_data_with_channel'] = test_features['padded_encoded_data'].apply(lambda x: torch.tensor(x).unsqueeze(0))"
      ],
      "metadata": {
        "id": "O2NS-c1BACmy"
      },
      "execution_count": 39,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "test_data_tensor = torch.stack(test_features['padded_encoded_data_with_channel'].tolist())\n",
        "test_data_tensor = torch.squeeze(test_data_tensor, dim=1)\n",
        "test_data_tensor = data_tensor.transpose(1, 2)\n",
        "test_data_tensor = data_tensor.long()"
      ],
      "metadata": {
        "id": "vuyPX2LLANlN"
      },
      "execution_count": 40,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "test_dataset = TensorDataset(test_data_tensor)\n",
        "test_loader = DataLoader(test_dataset, batch_size=32, shuffle=False)"
      ],
      "metadata": {
        "id": "ToGNfnWOCbkS"
      },
      "execution_count": 41,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "model.eval()  #evaluation mode\n",
        "predictions = []\n",
        "with torch.no_grad():\n",
        "    for inputs in test_loader:\n",
        "        inputs = inputs[0].float()\n",
        "        outputs = model(inputs)\n",
        "        _, predicted = torch.max(outputs.data, 1)\n",
        "        predictions.extend(predicted.tolist())\n",
        "\n",
        "#adjusting for the one off predictions\n",
        "predictions = [x + 1 for x in predictions]"
      ],
      "metadata": {
        "id": "W-jtvEGODGmT"
      },
      "execution_count": 42,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "#generate a text file\n",
        "\n",
        "with open('predictions.txt', 'w') as f:\n",
        "    for prediction in predictions:\n",
        "        f.write(f\"{prediction}\\n\")\n",
        "\n",
        "from google.colab import files\n",
        "files.download('predictions.txt')"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 17
        },
        "id": "BZAB4NIKGRY5",
        "outputId": "48e449a4-e719-484c-b4c4-b95a60869a2d"
      },
      "execution_count": 43,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<IPython.core.display.Javascript object>"
            ],
            "application/javascript": [
              "\n",
              "    async function download(id, filename, size) {\n",
              "      if (!google.colab.kernel.accessAllowed) {\n",
              "        return;\n",
              "      }\n",
              "      const div = document.createElement('div');\n",
              "      const label = document.createElement('label');\n",
              "      label.textContent = `Downloading \"${filename}\": `;\n",
              "      div.appendChild(label);\n",
              "      const progress = document.createElement('progress');\n",
              "      progress.max = size;\n",
              "      div.appendChild(progress);\n",
              "      document.body.appendChild(div);\n",
              "\n",
              "      const buffers = [];\n",
              "      let downloaded = 0;\n",
              "\n",
              "      const channel = await google.colab.kernel.comms.open(id);\n",
              "      // Send a message to notify the kernel that we're ready.\n",
              "      channel.send({})\n",
              "\n",
              "      for await (const message of channel.messages) {\n",
              "        // Send a message to notify the kernel that we're ready.\n",
              "        channel.send({})\n",
              "        if (message.buffers) {\n",
              "          for (const buffer of message.buffers) {\n",
              "            buffers.push(buffer);\n",
              "            downloaded += buffer.byteLength;\n",
              "            progress.value = downloaded;\n",
              "          }\n",
              "        }\n",
              "      }\n",
              "      const blob = new Blob(buffers, {type: 'application/binary'});\n",
              "      const a = document.createElement('a');\n",
              "      a.href = window.URL.createObjectURL(blob);\n",
              "      a.download = filename;\n",
              "      div.appendChild(a);\n",
              "      a.click();\n",
              "      div.remove();\n",
              "    }\n",
              "  "
            ]
          },
          "metadata": {}
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<IPython.core.display.Javascript object>"
            ],
            "application/javascript": [
              "download(\"download_a0efadd5-adb8-4ea8-8ac1-537d20fb2bc4\", \"predictions.txt\", 69541)"
            ]
          },
          "metadata": {}
        }
      ]
    }
  ],
  "metadata": {
    "colab": {
      "provenance": [],
      "authorship_tag": "ABX9TyM/WlqDhijJkFiCwCJsMuMx",
      "include_colab_link": true
    },
    "kernelspec": {
      "display_name": "Python 3",
      "name": "python3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "nbformat": 4,
  "nbformat_minor": 0
}